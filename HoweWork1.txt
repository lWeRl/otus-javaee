###1. Какие основные модели приложений Вам известны? Приведите примеры каждого из известных случаев.

a. Централизованная(одноуровневая) архитектура(MainFrame) - IBM System z, RDP, SSH и др. 
b. Файловый сервер(одноуровневая система) - Microsoft Office(удаленный доступ к документам)
c. Клиент-серверная архитектура(двухуровневая система) - любой 1С.
d. Трехзвенная архитектура(частный случай клиент-серверной архитектуры). Большинство Web-проектов.

###2. Объясните разницу между ними, в каких случаях стоит применять тот или иной подход?

a. MainFrame - все уровни приложения находятся на одном уровне(машине). Вся логика выполняется на MainFrame.
+ Полная централизация ресурсов, администрирования и доступа к ним.
- Полная зависимоть клиентов от MainFrame.

b. MainFrame - это файловый сервер. Логика выполянется уже не на mainfarme. Выполняется только сохранение данных.
+ Возможность многопотльзовательского режима
+ Централизация ресурсов
+ Легкость разработки
- Проблемы многопотльзовательского доступа к одному ресурсу
- Низкая производительность
- Низкая надежность системы

c. Двухуровневая система: клиент-сервер. Серер: хранение данных, бизнес логика. Клиент(толстый): бизнес логика, представление.
+ Безопасность данных
+ Совместное использование ресурсов приложения
+ Облегченная поддержка прав доступа
+ Уменьшение требований к серверному аппаратному и программному обеспечению.
- Сохранение консистентности клиента при изменении логики сервера.
- Возможность намеренной или ненамеренной порчи данных (несовместимые версии ПО).
- Постоянный достаточно широкий поток данных между сервером и клиентами.

d. Трехзвенная архитектура - частный случай клиент-серверной архитекуры. Разделенна физически на 3 слоя: доступ к данным(сервер данных), бизнес-логика(сервер приложения), предоставление(тонкий клиент).
+ Замена любого уровня не влияет на другие уровни.
+ Упрощение балансировки нагрузки доступа(разделение бизнес-логики и БД).
+ Легкая масштабируемость.
+ Повышенный уровень безопасности.
+ Нет необходимости администрирования клиента.
- Сложность настрйоки приложения.
- Вся функциональность зависит от доступности сервера.
- Стоимость разработки.

###3. Как Вы понимаете, что скрывается за понятиями тонкого и толстого клиента. Приведите пример яркого представителя thin-клиента.

Толстый клиент(fat) - клиент(компьютер или ПО) в клиент-серверной архитектуре. Который предоставляеит обширный функционал без постоянных обращений к серверу. Содержит в себе логику обработки данных. Пример: 1С, антивирусное ПО.

Тонкий клиент(thin) - легковесный клиент созданный для сообщения с сервером. Этот клиент не содержит тяжелой бизнес-логики. Пример: любой браузер.

###4. Какая модель является наиболее популярной на текущий момент в мире и отлично подходит для большинства решений уровня enterprise? - Трехзвенная модель.

###Практическая часть
Представим ситуацию: имеется в распоряжении организация «Рога и Копыта», сотрудники которой имеют доступ к некоторой внутренней ИС. В этой системе хранится информация о всех сотрудниках организации, обратиться к которой можно согласно предоставленному уровню доступа (ролевое разграничение доступа) по следующим правилам:
1. Каждый зарегистрированный сотрудник (имеющий логин/пароль для входа в систему) может получить информацию о любом другом сотруднике: ФИО, название подразделения и город, в котором он/она работает, должность, внутренний номер телефона сотрудника, а также личный почтовый ящик.
2. Бухгалтера имеют доступ к заработной плате каждого сотрудника с возможностью ее индексации (увеличения) и депремирования.
3. HR-специалисты способны редактировать персональную информацию о каждом, кроме оклада, а также удалять сотрудников из реестра.
4. Директор компании (представлен в системе в единственном экземпляре) имеет все права, описанные выше.

Ответ: трехзвенная модель
1. Слой представления:
Предоставляет интерфйес входа в систему для пользователя. Отоброжание(полное или нет) и возможно редактирование формы пользователя в зависимости от пришедших данных с сервера. Общается со слоем приложения.
2. Слой приложения:
Проверка доступа к функциям приложения в зависимоти от роли пользователя ситсемы. Отдача информации из базы данных о пользователе с контролем объема данных в зависимости от роли запрашивающего информацию. Возможность принятия данных с тонкого клиента для изменения данных в бвзе данных при наличии определенной роли у пользователя. Общается как со слоем представления так и со слоем данных.
3. Слой данных:
База данных хранящяя информацию о логинах/паролях, правах, пользователях и их зарплатах. Общается со слоем приложения.